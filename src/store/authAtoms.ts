// src/store/authAtoms.ts
import { atom } from 'jotai';
import { jwtDecode } from 'jwt-decode';
import { TokenPayload } from '@/types/auth/token.interface';

// –ê—Ç–æ–º –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const isAuthenticatedAtom = atom<boolean>(false);

// –ê—Ç–æ–º –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const roleAtom = atom<TokenPayload['role'] | null>(null);

// –ê—Ç–æ–º –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏–Ω–∞
export const loginAtom = atom(
  null,
  (get, set, token: string) => {
    console.log('üîê loginAtom: –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–æ–≥–∏–Ω–∞', { tokenLength: token.length });
    
    localStorage.setItem('auth_token', token);
    console.log('üíæ loginAtom: —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
    
    const decoded = jwtDecode<TokenPayload>(token);
    console.log('üîë loginAtom: —Ç–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω', { role: decoded.role });
    
    set(roleAtom, decoded.role);
    console.log('üë§ loginAtom: —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    
    set(isAuthenticatedAtom, true);
    console.log('‚úÖ loginAtom: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π');
  }
);

// –ê—Ç–æ–º –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞
export const logoutAtom = atom(
  null,
  (get, set) => {
    console.log('üö™ logoutAtom: –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã—Ö–æ–¥–∞');
    
    localStorage.removeItem('auth_token');
    console.log('üóëÔ∏è logoutAtom: —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ localStorage');
    
    set(roleAtom, null);
    console.log('üë§ logoutAtom: —Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞');
    
    set(isAuthenticatedAtom, false);
    console.log('‚ùå logoutAtom: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π');
  }
);

// –ê—Ç–æ–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
export const initializeAuthAtom = atom(
  null, 
  (get, set) => {
    console.log('üîÑ initializeAuthAtom: –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    
    const token = localStorage.getItem('auth_token');
    console.log('üîç initializeAuthAtom: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ localStorage', { hasToken: !!token });
    
    if (token) {
      try {
        console.log('üîë initializeAuthAtom: –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω');
        const decoded = jwtDecode<TokenPayload>(token);
        
        set(roleAtom, decoded.role);
        console.log('üë§ initializeAuthAtom: —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', { role: decoded.role });
        
        set(isAuthenticatedAtom, true);
        console.log('‚úÖ initializeAuthAtom: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π');
      } catch (error) {
        console.error('‚ùå initializeAuthAtom: –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', error);
        console.log('üîÑ initializeAuthAtom: –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—ã—Ö–æ–¥–∞ –∏–∑-–∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
        set(logoutAtom);
      }
    } else {
      console.log('‚ÑπÔ∏è initializeAuthAtom: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    }
  }
);
